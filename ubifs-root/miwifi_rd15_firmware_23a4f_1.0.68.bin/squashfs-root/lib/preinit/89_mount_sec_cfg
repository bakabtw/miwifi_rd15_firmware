#!/bin/ash

# default vol size is 8M, you can define it in /lib/preinit/00_preinit.conf to change it
readonly SEC_CFG_VOL_SIZE=${SEC_CFG_VOL_SIZE:="8192"}
readonly SEC_CFG_VOL_FILE="/data/sec_cfg/data.vol"
readonly SEC_CFG_VOL_BACK="/data/usr/sec_cfg/data.vol"
readonly SEC_CFG_KEY_IDEN="/data/sec_cfg/iden"
readonly SEC_CFG_KEY_FILE="/tmp/sec_cfg/key"
readonly SEC_CFG_MAP_DEV="sec_cfg"
readonly SEC_CFG_MAP_PATH="/dev/mapper"
readonly SEC_CFG_MOUNT_DEST="/tmp/sec_cfg/etc"
readonly SEC_CFG_ORI_DIR="/data/etc"
readonly SEC_CFG_TMP_DIR="/tmp/sec_cfg/bak_cfg"
readonly SEC_CFG_NONCE_NAME="sec_cfg_nonce"
readonly SEC_CFG_DBG_INFO="/tmp/sec_cfg/dbginfo.txt"

mount_sec_cfg_log_crash() {
	mkdir -p "${SEC_CFG_DBG_INFO%/*}"

	{
		echo "Mount sec_cfg failed!"
		dmesg
		mount
	} >> "$SEC_CFG_DBG_INFO"

	mtd_crash_log -f "$SEC_CFG_DBG_INFO"
}

mount_sec_cfg_log_console() {
	echo "$*" |tee /dev/console >/dev/null
}

mount_sec_cfg_loop_prepare() {
	if [ ! -b /dev/loop0 ]; then
		insmod loop
		mknod -m 0660 /dev/loop0 b 7 0
	fi
}

mount_sec_cfg_nonce_init() {
	local _uuid=

	_uuid=$(cat /proc/sys/kernel/random/uuid)

	mkdir -p "${SEC_CFG_KEY_IDEN%/*}"
	echo "$SEC_CFG_NONCE_NAME=$_uuid" | base64 | tee "$SEC_CFG_KEY_IDEN" >/dev/null
	sync
}

mount_sec_cfg_key_init() {
	if [ -s "$SEC_CFG_KEY_FILE" ]; then
		return 0
	fi

	local _nonce=
	local _sn=

	_sn=$(nvram show | grep -E ^SN=)

	if [ -s "$SEC_CFG_KEY_IDEN" ]; then
		_nonce=$(base64 -d "$SEC_CFG_KEY_IDEN")
	else
		_nonce=$(nvram show | grep -E "^${SEC_CFG_NONCE_NAME}=")

		if [ -n "$_nonce" ]; then
			# Generate iden file if not exist
			mkdir -p "${SEC_CFG_KEY_IDEN%/*}"
			echo "$_nonce" | base64 | tee "$SEC_CFG_KEY_IDEN" >/dev/null
			sync
		fi
	fi

	mkdir -p "${SEC_CFG_KEY_FILE%/*}"

	printf "%s\n%s\n" "${_sn}" "${_nonce}" \
		| sort \
		| openssl dgst -binary -sha512 \
		| tee "$SEC_CFG_KEY_FILE" >/dev/null
}

mount_sec_cfg_vol_open() {
	if [ ! -s "$SEC_CFG_VOL_FILE" ]; then
		return 1
	fi

	cryptsetup --key-file "$SEC_CFG_KEY_FILE" \
		luksOpen "$SEC_CFG_VOL_FILE" "$SEC_CFG_MAP_DEV"

	return 0
}

mount_sec_cfg_vol_close() {
	cryptsetup luksClose "$SEC_CFG_MAP_DEV"
}

mount_sec_cfg_vol_init() {
	# Create vol
	mkdir -p "${SEC_CFG_VOL_FILE%/*}"
	dd if=/dev/zero of="$SEC_CFG_VOL_FILE" bs=1K count="$SEC_CFG_VOL_SIZE"

	# Generate Nonce
	mount_sec_cfg_nonce_init

	# Generate key file
	mount_sec_cfg_key_init

	# Format vol
	cryptsetup -q \
		--align-payload=1 --type luks1 \
		--key-file "$SEC_CFG_KEY_FILE" \
		luksFormat "$SEC_CFG_VOL_FILE"

	# Open vol
	if mount_sec_cfg_vol_open; then
		mount_sec_cfg_log_console "Secure config vol was created successfully."
	fi

	# Create file system
	mkfs.ext4 -O ^huge_file -F "$SEC_CFG_MAP_PATH/$SEC_CFG_MAP_DEV"
}

mount_sec_cfg_chk_vol() {
	local _ret=0

	# Open vol as map dev
	if ! mount_sec_cfg_vol_open; then
		return 3
	fi

	# Check whether maped dev exist
	if [ ! -b "$SEC_CFG_MAP_PATH/$SEC_CFG_MAP_DEV" ]; then
		mount_sec_cfg_log_console "Secure config vol can not open!"
		return 1
	fi

	# Check and repair file system
	e2fsck -p "$SEC_CFG_MAP_PATH/$SEC_CFG_MAP_DEV" || _ret=$?

	# 0: No errors | 1: File system errors corrected
	if [ "$_ret" -gt 1 ]; then
		mount_sec_cfg_log_console "Secure config vol fsck return $_ret"
		mount_sec_cfg_vol_close
		return 2
	fi
}

mount_sec_cfg_to_dest() {
	# Generate key file
	mount_sec_cfg_key_init

	if ! mount_sec_cfg_chk_vol; then
		# Latest vol error, try backup if exist
		if [ -s "$SEC_CFG_VOL_BACK" ]; then
			mount_sec_cfg_log_console "Secure config vol copy from backup!"
			cp "$SEC_CFG_VOL_BACK" "$SEC_CFG_VOL_FILE"
			sync

			if ! mount_sec_cfg_chk_vol; then
				mount_sec_cfg_log_console "Secure config vol all broken!"
				return 2
			fi
		else
			return 1
		fi
	fi

	# Delete key
	rm -f "$SEC_CFG_KEY_FILE"

	# Mount to dest
	mkdir -p "$SEC_CFG_MOUNT_DEST"
	mount -t ext4 -osync "$SEC_CFG_MAP_PATH/$SEC_CFG_MAP_DEV" "$SEC_CFG_MOUNT_DEST"

	# Remove lost and found to avoid space full
	rm -rf "$SEC_CFG_MOUNT_DEST/lost+found"/*
	sync

	return 0
}

mount_sec_cfg_dir_init() {
	if [ -d "$SEC_CFG_ORI_DIR" ]; then
		find "$SEC_CFG_ORI_DIR" -mindepth 1 -exec mv {} "$SEC_CFG_MOUNT_DEST" \;
		sync
	else
		mkdir -p "$SEC_CFG_ORI_DIR"
	fi

	mount --bind "$SEC_CFG_MOUNT_DEST" "$SEC_CFG_ORI_DIR"
}

mount_sec_cfg_dir_revert() {
	mkdir -p "$SEC_CFG_ORI_DIR"
	find "$SEC_CFG_MOUNT_DEST" -mindepth 1 -exec mv {} "$SEC_CFG_ORI_DIR" \;
	sync
}

mount_sec_cfg_del_vol() {
	[ -d "$SEC_CFG_MOUNT_DEST" ] && umount "$SEC_CFG_MOUNT_DEST"
	mount_sec_cfg_vol_close
	rm -f "$SEC_CFG_VOL_FILE"
}

mount_sec_cfg_del_back() {
	if [ -e "$SEC_CFG_VOL_BACK" ]; then
		rm -rf "${SEC_CFG_VOL_BACK%/*}"
	fi
}

mount_sec_cfg_dir_recovery() {
	# Check dir exist
	if [ -d "$SEC_CFG_ORI_DIR" ]; then
		mkdir -p "$SEC_CFG_TMP_DIR"
		cp -rf /data/etc "$SEC_CFG_TMP_DIR"
		sync
	fi
}

mount_sec_cfg() {
	local _ftmode=

	_ftmode=$(cat /proc/xiaoqiang/ft_mode)

	# Skip vol init in factory mode
	if [ ! -s "$SEC_CFG_VOL_FILE" ] && [ "$_ftmode" = "1" ]; then
		return 0
	fi

	# Prepare loop dependency
	mount_sec_cfg_loop_prepare

	# Check whether vol inited
	if [ ! -s "$SEC_CFG_VOL_FILE" ] && [ ! -s "$SEC_CFG_VOL_BACK" ]; then
		mount_sec_cfg_vol_init
	fi

	# Mount vol to dest
	if mount_sec_cfg_to_dest; then
		if [ "$_ftmode" = "1" ]; then
			# Revert config files
			mount_sec_cfg_dir_revert

			# Delete vol after revert
			mount_sec_cfg_del_vol
		else
			# Prepare config files
			mount_sec_cfg_dir_init
		fi
	else
		mount_sec_cfg_log_console "Secure config vol mount failed, try to recovery!"

		# Mount failed, try to recovery config
		mount_sec_cfg_dir_recovery

		# Log crash then Delete vol
		mount_sec_cfg_log_crash
		mount_sec_cfg_del_vol
		mount_sec_cfg_del_back
		sync
	fi
}

boot_hook_add preinit_main mount_sec_cfg
