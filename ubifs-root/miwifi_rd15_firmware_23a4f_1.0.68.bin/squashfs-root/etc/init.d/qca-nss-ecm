#!/bin/sh  /etc/rc.common
#
# Copyright (c) 2014, 2019-2021 The Linux Foundation. All rights reserved.
# Copyright (c) 2022 Qualcomm Innovation Center, Inc. All rights reserved.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# The shebang above has an extra space intentially to avoid having
# openwrt build scripts automatically enable this package starting
# at boot.

START=19

LOCK_QCA_NSS_ECM="/var/run/qca_nss_ecm.lock"

get_front_end_mode() {
	local front_end

	config_load "ecm"
	config_get front_end global acceleration_engine "auto"

	case $front_end in
	auto)
		echo '0'
		;;
	nss)
		echo '1'
		;;
	sfe)
		echo '2'
		;;
	ppe)
		echo '3'
		;;
	nss-sfe)
		echo '4'
		;;
	ppe-sfe)
		echo '5'
		;;
	*)
		echo '-1'
	esac
}

support_bridge() {
	#NSS support bridge acceleration
	[ -d /sys/kernel/debug/ecm/ecm_nss_ipv4 ] && return 0
	#SFE support bridge acceleration
	[ -d /sys/kernel/debug/ecm/ecm_sfe_ipv4 ] && return 0
	#PPE support bridge acceleration
	[ -d /sys/kernel/debug/ecm/ecm_ppe_ipv4 ] && return 0
}

load_sfe() {
	local kernel_version=$(uname -r)

	[ -e "/lib/modules/$kernel_version/qca-nss-sfe.ko" ] && {
		[ -d /sys/module/qca_nss_sfe ] || insmod qca-nss-sfe
	}

}

unload_sfe() {
	[ -d /sys/module/qca_nss_sfe ] && rmmod qca-nss-sfe
}

ecm_dependency() {
	[ -e /lib/modules/$(uname -r)/emesh-sp.ko ] && insmod emesh-sp
	[ -e /lib/modules/$(uname -r)/nf_conntrack.ko ] && modprobe nf_conntrack
	[ -e /lib/modules/$(uname -r)/qca-nss-ppe.ko ] && modprobe qca-nss-ppe
	[ -e /lib/modules/$(uname -r)/qca-ovsmgr.ko ] && modprobe qca-ovsmgr
	[ -e /lib/modules/$(uname -r)/bonding.ko ] && modprobe bonding
	[ -e /lib/modules/$(uname -r)/l2tp_ppp.ko ] && modprobe l2tp_ppp
	[ -e /lib/modules/$(uname -r)/qca-nss-ppe-vxlanmgr.ko ] && modprobe qca-nss-ppe-vxlanmgr
}

load_ecm() {
	local front_end_mode=$(get_front_end_mode)

	[ -d /sys/module/ecm ] || {
		ecm_dependency
		insmod ecm front_end_selection="$front_end_mode"

		if [ "$front_end_mode" = 4 ]; then
			insmod ecm_ae_select
		fi
	}

	# Set conntrack event mode to 1 for 6.1 kernel to get the conntrack events from ECM
	local kernel_major=`uname -r |cut -d. -f1`
	if [ $kernel_major == 6 ]; then
		echo 1 > /proc/sys/net/netfilter/nf_conntrack_events
	fi

	support_bridge && {
		sysctl -w net.bridge.bridge-nf-call-ip6tables=1
		sysctl -w net.bridge.bridge-nf-call-iptables=1
	}

	if [ -d /sys/module/mipctl ] && [ -e "/lib/modules/$(uname -r)/ecm_pcc_mipctl.ko" ]; then
		insmod ecm_pcc_mipctl
	fi
}

unload_ecm() {
	sysctl -w net.bridge.bridge-nf-call-ip6tables=0
	sysctl -w net.bridge.bridge-nf-call-iptables=0

	# Change it back to 6.1 linux's default setting
	local kernel_major=`uname -r |cut -d. -f1`
	if [ $kernel_major == 6 ]; then
		echo 2 > /proc/sys/net/netfilter/nf_conntrack_events
	fi

	if [ -d /sys/module/ecm_pcc_mipctl ]; then
		echo 1 > /sys/kernel/debug/ecm_pcc_mipctl/unregister
		rmmod ecm_pcc_mipctl
		sleep 1
	fi

	if [ -d /sys/module/ecm ]; then
		#
		# Stop ECM frontends
		#
		echo 1 > /sys/kernel/debug/ecm/front_end_ipv4_stop
		echo 1 > /sys/kernel/debug/ecm/front_end_ipv6_stop

		#
		# Defunct the connections
		#
		echo 1 > /sys/kernel/debug/ecm/ecm_db/defunct_all
		sleep 5;

		#
		# unload ecm-wifi-plugin
		#
		if [ -d /sys/module/ecm_wifi_plugin ]; then
			rmmod ecm-wifi-plugin
		fi

		if [ -d /sys/module/ecm_ae_select ]; then
			rmmod ecm_ae_select
		fi

		rmmod ecm
		sleep 1
	fi
}

set_wifi_mscs() {
	local mscs_enable=0
	local vifs=""
	local vif=""

	config_cb() {
		local type="$1"
		local section="$2"

		if [ -n "$type" -a "$type" = "wifi-iface" ]; then
			append vifs "$section"
		fi
	}
	config_load wireless
	for vif in $vifs; do
		config_get mscs_enable "$vif" mscs 0
		if [ "$mscs_enable" = "1" ]; then
			break
		fi
	done

	echo $mscs_enable > /sys/kernel/debug/ecm/ecm_classifier_mscs/enabled
}

start() {
	[ "-1" = "$(get_front_end_mode)" ] && return

	load_sfe
	load_ecm

	# If the acceleration engine is NSS, enable wifi redirect.
	[ -d /sys/kernel/debug/ecm/ecm_nss_ipv4 ] && sysctl -w dev.nss.general.redirect=1

	support_bridge && {
		echo 'net.bridge.bridge-nf-call-ip6tables=1' >> /etc/sysctl.d/qca-nss-ecm.conf
		echo 'net.bridge.bridge-nf-call-iptables=1' >> /etc/sysctl.d/qca-nss-ecm.conf
	}

	if [ -d /sys/module/qca_ovsmgr ]; then
		insmod ecm_ovs
	fi

	local kernel_version=$(uname -r)

	[ -e "/lib/modules/$kernel_version/ecm-wifi-plugin.ko" ] && {
		[ -d /sys/module/ecm_wifi_plugin ] || [ -f /tmp/.wifi-config-done ] && {
			insmod ecm-wifi-plugin
			set_wifi_mscs
		}
	}

	[ "$(uci -q get miqos.settings.enabled)" = "1" ] && {
		/sbin/accelctrl qos update > /dev/null 2>&1
	}

	#Enable VLAN passthrough in PPE ECM
	[ -e "/sys/kernel/debug/ecm/ecm_ppe_ipv4/vlan_passthrough_set" ] && {
		echo 1 > /sys/kernel/debug/ecm/ecm_ppe_ipv4/vlan_passthrough_set
	}
	[ -e "/sys/kernel/debug/ecm/ecm_ppe_ipv6/vlan_passthrough_set" ] && {
		echo 1 > /sys/kernel/debug/ecm/ecm_ppe_ipv6/vlan_passthrough_set
	}
}

stop() {
	# If ECM is already not loaded, just return.
	if [ ! -d /sys/module/ecm ]; then
		return
	fi

	# If the acceleration engine is NSS, disable wifi redirect.
	[ -d /sys/kernel/debug/ecm/ecm_nss_ipv4 ] && sysctl -w dev.nss.general.redirect=0

	sed '/net.bridge.bridge-nf-call-ip6tables=1/d' -i /etc/sysctl.d/qca-nss-ecm.conf
	sed '/net.bridge.bridge-nf-call-iptables=1/d' -i /etc/sysctl.d/qca-nss-ecm.conf

	if [ -d /sys/module/ecm_ovs ]; then
		rmmod ecm_ovs
	fi

	unload_ecm
	unload_sfe
}

restart() {
	trap "lock -u $LOCK_QCA_NSS_ECM; exit 1" SIGHUP SIGINT SIGTERM
	lock $LOCK_QCA_NSS_ECM

	stop
	start

	lock -u $LOCK_QCA_NSS_ECM
}
