#!/bin/sh
# Copyright (C) 2006 OpenWrt.org

. /lib/functions.sh
. /usr/share/libubox/jshn.sh

wifi_qca_lock="/var/run/wifi.lock"
XQLOGTAG="xqwhc_wifi"
BACKUP_FILE="/tmp/backup_wireless"
OLD_WFCFG="/tmp/old_wireless"
NEW_WFCFG="/tmp/new_wireless"

usage() {
	cat <<EOF
Usage: $0 [config|up|down|reload|status]
enables (default), disables or configures devices not yet configured.
EOF
	lock -u $wifi_qca_lock
	exit 1
}

nfc_update() {
	local op=$1
	if [ -f "/usr/sbin/nfc.lua" ]; then
		local nfc_default_cfg=$(uci -q get wireless.nfc_2g.ssid)
		if [ -n "$nfc_default_cfg" ]; then
			local router_inited=$(uci -q get xiaoqiang.common.INITTED)
			if [ -n "$router_inited" ]; then
				/sbin/nfc rm_wifi
			fi
			if [ "$op" = "update" ]; then
				local md5_now=$(md5sum /etc/config/wireless | awk '{ print $1 }')
				local md5_ori=$(md5sum $BACKUP_FILE | awk '{ print $1 }')
				local md5_nfc=$(md5sum /var/run/nfc_wireless_backup | awk '{ print $1 }')
				if [ "$md5_now" != "$md5_ori" ] && [ "$md5_now" != "$md5_nfc" ]; then
					/sbin/nfc rm_wifi
				fi
			fi
		fi
		/usr/sbin/nfc.lua &
	fi
}

wifi_get_cac_time() {
	scan_wifi

	if eval "type get_cac_time_${DRIVERS}" 2>/dev/null >/dev/null; then
		eval "get_cac_time_${DRIVERS}" "$@"
	fi
}

set_chan()
{
	local ifname=$1
	local target_ch=$2

	[ -z "$ifname" ] || [ -z "$target_ch" ] && return 1

	# get parent device
	[ -f /sys/class/net/$ifname/parent ] && {
		local device=$(cat /sys/class/net/$ifname/parent)

		config_get device_if "$device" device_if "cfg80211tool"
		"$device_if" "$device" set_precac_chan 1
		iwconfig $ifname channel $target_ch
		"$device_if" "$device" set_precac_chan 0
		return 0
	}
	return 1
}

kick_macs() {
	local if="$1"
	local g_devices=$DEVICES

	for device in $g_devices; do
		config_get device_if "$device" device_if "cfg80211tool"
		"$device_if" "$device" set_precac_chan 1
	done

	if eval "type pre_kick_macs_${DRIVERS}" 2>/dev/null >/dev/null; then
		eval "pre_kick_macs_${DRIVERS}" "$if"
	fi

	for device in $g_devices; do (
		config_get disabled "$device" disabled
		[ "$disabled" = "1" ] && {
			echo "'$device' is disabled"
			set disable
		}
		config_get iftype "$device" type
		if eval "type kick_macs_$iftype" 2>/dev/null >/dev/null; then
			eval "scan_$iftype '$device' '$if'"
			eval "kick_macs_${iftype}" "$device" "$if" || echo "$device($iftype): kick_macs failed"
		elif [ ! -f /lib/netifd/wireless/$iftype.sh ]; then
			echo "$device($iftype): Interface type not supported"
		fi
	); done

	if eval "type post_kick_macs_${DRIVERS}" 2>/dev/null >/dev/null; then
		eval "post_kick_macs_${DRIVERS}" "$if"
	fi

	for device in $g_devices; do
		config_get device_if "$device" device_if "cfg80211tool"
		"$device_if" "$device" set_precac_chan 0
	done
}

ubus_wifi_cmd() {
	local cmd="$1"
	local dev="$2"

	json_init
	[ -n "$2" ] && json_add_string device "$2"
	ubus call network.wireless "$1" "$(json_dump)"
}

find_net_config() {(
	local vif="$1"
	local cfg
	local ifname

	config_get cfg "$vif" network

	[ -z "$cfg" ] && {
		include /lib/network
		scan_interfaces

		config_get ifname "$vif" ifname

		cfg="$(find_config "$ifname")"
	}
	[ -z "$cfg" ] && return 0
	echo "$cfg"
)}


bridge_interface() {(
	local cfg="$1"
	[ -z "$cfg" ] && return 0

	include /lib/network
	scan_interfaces

	for cfg in $cfg; do
		config_get iftype "$cfg" type
		[ "$iftype" = bridge ] && config_get "$cfg" ifname
		prepare_interface_bridge "$cfg" > /dev/null 2>&1
		return $?
	done
)}

prepare_key_wep() {
	local key="$1"
	local hex=1

	echo -n "$key" | grep -qE "[^a-fA-F0-9]" && hex=0
	[ "${#key}" -eq 10 -a $hex -eq 1 ] || \
	[ "${#key}" -eq 26 -a $hex -eq 1 ] || \
	[ "${#key}" -eq 32 -a $hex -eq 1 ] || {
		[ "${key:0:2}" = "s:" ] && key="${key#s:}"
		key="$(echo -n "$key" | hexdump -ve '1/1 "%02x" ""')"
	}
	echo "$key"
}

wifi_fixup_hwmode() {
	local device="$1"
	local default="$2"
	local hwmode hwmode_11n

	config_get channel "$device" channel
	config_get hwmode "$device" hwmode
	case "$hwmode" in
		11ad) hwmode=ad;;
		11bg) hwmode=bg;;
		11a) hwmode=a;;
		11b) hwmode=b;;
		11g) hwmode=g;;
		11n*)
			hwmode_11n="${hwmode##11n}"
			case "$hwmode_11n" in
				a|g) ;;
				default) hwmode_11n="$default"
			esac
			config_set "$device" hwmode_11n "$hwmode_11n"
		;;
		*)
			hwmode=
			if [ "${channel:-0}" -gt 0 ]; then
				if [ "${channel:-0}" -gt 14 ]; then
					hwmode=a
				else
					hwmode=g
				fi
			else
				hwmode="$default"
			fi
		;;
	esac
	config_set "$device" hwmode "$hwmode"
}

_wifi_updown() {
	for driver in ${DRIVERS}; do (
		if eval "type pre_${driver}" 2>/dev/null >/dev/null; then
			eval "pre_${driver} ${1} '$2' '$3' '$4' '$5'"
		fi
	); done

	for device in ${2:-$DEVICES}; do (
		config_get disabled "$device" disabled
		[ "$disabled" = "1" ] && {
			echo "'$device' is disabled"
			set disable
		}
		config_get iftype "$device" type
		if eval "type ${1}_$iftype" 2>/dev/null >/dev/null; then
			eval "scan_$iftype '$device'"
			eval "${1}_$iftype '$device' '$3'" || echo "$device($iftype): ${1} failed"
		elif [ ! -f /lib/netifd/wireless/$iftype.sh ]; then
			echo "$device($iftype): Interface type not supported"
		fi
	); done

	for driver in ${DRIVERS}; do (
		if eval "type post_${driver}" 2>/dev/null >/dev/null; then
			eval "post_${driver} ${1} '$2' '$3'"
		fi
	); done

	if [ "${1}" == "enable" ]; then
		echo 3 > /proc/sys/vm/drop_caches
	fi
}

wifi_updown() {
	pre_wifi_updown
	cmd=down
	[ enable = "$1" ] && {
		_wifi_updown disable "$2" "$3"
		ubus_wifi_cmd "$cmd" "$2"
		scan_wifi
		cmd=up
	}
	ubus_wifi_cmd "$cmd" "$2"
	_wifi_updown "$@"
	post_wifi_updown
}

backup_cfg() {
	cp /etc/config/wireless $BACKUP_FILE
}


wifi_update() {
	local gdevices=

	nfc_update update
	local downup=$1
	if [ -z "$downup" -a  ! -f "$BACKUP_FILE" ]; then
		echo "backup file not exist, wifi_reload"
		wifi_reload
		return
	fi

	for device in ${DEVICES}; do (
		config_get device_if "$device" device_if "cfg80211tool"
		"$device_if" "$device" set_precac_chan 1
	);done

	if eval "type pre_${DRIVERS}" 2>/dev/null >/dev/null; then
		eval "pre_${DRIVERS}" "disable" "wifi_update" "$BACKUP_FILE"
	fi

	# copy backup wireless cfg to old_cfg
	mv $BACKUP_FILE $OLD_WFCFG
	# copy current wireless cfg to new_cfg
	cp /etc/config/wireless $NEW_WFCFG
	config_set wireless "conffile" "$NEW_WFCFG"

	# scan new_cfg
	config_load $NEW_WFCFG
	scan_wifi $NEW_WFCFG

	gdevices=${2:-$DEVICES}
	for device in ${gdevices}; do (
		config_get disabled "$device" disabled
		[ "$disabled" = "1" ] && {
			echo "'$device' is disabled"
			set disable
		}
		config_get iftype "$device" type
		if eval "type update_$iftype" 2>/dev/null >/dev/null; then
			# compare new_cfg with old_cfg and update
			eval "update_$iftype '$device' '$OLD_WFCFG' ${downup}" || echo "$device($iftype): ${1} failed"
	fi
	); done

	if eval "type post_${DRIVERS}" 2>/dev/null >/dev/null; then
		eval "post_${DRIVERS}" "enable" "wifi_update" "$OLD_WFCFG"
	fi

	for device in ${gdevices}; do (
		config_get device_if "$device" device_if "cfg80211tool"
		"$device_if" "$device" set_precac_chan 0
	); done

	echo 3 > /proc/sys/vm/drop_caches

	# update new_cfg to backup_cfg
	mv $NEW_WFCFG $BACKUP_FILE
}

wifi_recover() {
	_wifi_updown disable_recover "$1"
	_wifi_updown enable_recover "$1"
}

wifi_reload_legacy() {
	pre_wifi_reload_legacy
	cp /etc/config/wireless $NEW_WFCFG
	_wifi_updown "disable" "$1" "$2" "$3" "$4"
	scan_wifi
	_wifi_updown "enable" "$1" "$2" "$3" "$4"
	mv $NEW_WFCFG $BACKUP_FILE
	post_wifi_reload_legacy
}

wifi_reload() {
	ubus call network reload
	wifi_reload_legacy "" "$2"
}

wifi_detect_notice() {
	>&2 echo "WARNING: Wifi detect is deprecated. Use wifi config instead"
	>&2 echo "For more information, see commit 5f8f8a366136a07df661e31decce2458357c167a"
	exit 1
}

wifi_config() {
	pre_wifi_config
	[ ! -f /etc/config/wireless ] && touch /etc/config/wireless

	for driver in $DRIVERS; do (
		if eval "type detect_$driver" 2>/dev/null >/dev/null; then
			eval "detect_$driver" "$1" || echo "$driver: Detect failed" >&2
		else
			echo "$driver: Hardware detection not supported" >&2
		fi
	); done
	post_wifi_config
}

wifi_unload() {
	pre_wifi_unload
	_wifi_updown "disable" "$1"
	for driver in ${1:-$DRIVERS}; do (
		if eval "type unload_$driver" 2>/dev/null >/dev/null; then
			eval "unload_$driver" || echo "$driver: unload failed" >&2
		else
			echo "$driver: wifi unload not supported" >&2
		fi
	); done
	post_wifi_unload
}

_wifi_unload() {
	_wifi_updown "disable" "$1"
	for driver in ${1:-$DRIVERS}; do (
		if eval "type unload_$driver" 2>/dev/null >/dev/null; then
			eval "unload_$driver" || echo "$driver: unload failed" >&2
		else
			echo "$driver: wifi unload not supported" >&2
		fi
	); done
}

wifi_load() {
	pre_wifi_load
	cp /etc/config/wireless $NEW_WFCFG
	_wifi_unload
	for driver in ${1:-$DRIVERS}; do (
		if eval "type load_$driver" 2>/dev/null >/dev/null; then
			eval "load_$driver" "$2" || echo "$driver: load failed" >&2
		else
			echo "$driver: wifi load not supported" >&2
		fi
	); done
	_wifi_updown "enable" "$1" "$2"
	mv $NEW_WFCFG $BACKUP_FILE
	post_wifi_load
}

start_net() {(
	local iface="$1"
	local config="$2"
	local vifmac="$3"

	[ -f "/var/run/$iface.pid" ] && kill "$(cat /var/run/${iface}.pid)" 2>/dev/null
	[ -z "$config" ] || {
		include /lib/network
		scan_interfaces
		for config in $config; do
			setup_interface "$iface" "$config" "" "$vifmac"
		done
	}
)}

set_wifi_up() {
	local cfg="$1"
	local ifname="$2"
	uci_set_state wireless "$cfg" up 1
	uci_set_state wireless "$cfg" ifname "$ifname"
}

set_wifi_down() {
	local cfg="$1"
	local vifs vif vifstr

	[ -f "/var/run/wifi-${cfg}.pid" ] &&
		kill "$(cat "/var/run/wifi-${cfg}.pid")" 2>/dev/null
	uci_revert_state wireless "$cfg"
	config_get vifs "$cfg" vifs
	for vif in $vifs; do
		uci_revert_state wireless "$vif"
	done
}

scan_wifi() {
	local cfgfile="$1"
	DEVICES=
	MLD_DEVICES=
	config_cb() {
		local type="$1"
		local section="$2"

		# section start
		case "$type" in
			wifi-device)
				append DEVICES "$section"
				config_set "$section" vifs ""
				config_set "$section" ht_capab ""
			;;
		esac

		# section end
		config_get TYPE "$CONFIG_SECTION" TYPE
		case "$TYPE" in
			wifi-iface)
				config_get device "$CONFIG_SECTION" device
				config_get vifs "$device" vifs
				echo $vifs | grep -q $CONFIG_SECTION
				if [ $? -ne 0 ]
				then
					append vifs "$CONFIG_SECTION"
				fi
				config_set "$device" vifs "$vifs"
			;;
			wifi-mld)
				append MLD_DEVICES "$CONFIG_SECTION"
			;;
		esac
	}
	config_load "${cfgfile:-wireless}"
}

wifi_trap() {
	for driver in ${1:-$DRIVERS}; do (
		if eval "type trap_$driver" 2>/dev/null >/dev/null; then
			eval "trap_$driver" >&2
		fi
	); done
}

miwifi_trap() {
	wifi reload &
	rm $NEW_WFCFG $OLD_WFCFG 2>>/dev/null
}

wifi_disable_vap() {
	local g_devices=$DEVICES
	for device in $g_devices; do
		config_get device_if "$device" device_if "cfg80211tool"
		"$device_if" "$device" set_precac_chan 1
	done
	if eval "type disable_vap_${DRIVERS}" 2>/dev/null >/dev/null; then
		eval "disable_vap_${DRIVERS}" "$@"
	fi
	for device in $g_devices; do
		config_get device_if "$device" device_if "cfg80211tool"
		"$device_if" "$device" set_precac_chan 0
	done
}

wifi_enable_vap() {
	scan_wifi
	local g_devices=$DEVICES
	for device in $g_devices; do
		config_get device_if "$device" device_if "cfg80211tool"
		"$device_if" "$device" set_precac_chan 1
	done
	if eval "type enable_vap_${DRIVERS}" 2>/dev/null >/dev/null; then
		eval "enable_vap_${DRIVERS}" "$@"
	fi
	for device in $g_devices; do
		config_get device_if "$device" device_if "cfg80211tool"
		"$device_if" "$device" set_precac_chan 0
	done
}

wifi_get_cac_time() {
	scan_wifi

	if eval "type get_cac_time_${DRIVERS}" 2>/dev/null >/dev/null; then
		eval "get_cac_time_${DRIVERS}" "$@"
	fi
}

wifi_get_nol_state() {
	local if_5G=$(uci -q get misc.wireless.if_5G)
	local channel=$(uci -q get wireless.$if_5G.channel)
	[ $channel = "auto" ] && channel=0
	local bw=$(uci -q get wireless.$if_5G.bw)
	[ $bw = "auto" ] && bw=0
	ch_has_nol=$(radartool -i ${if_5G} ch_has_nol ${channel} ${bw})
	local split_state=$(wifi_5g_split get)
	[ "$split_state" = "1" ] && {
		local if_5GH=$(uci -q get misc.wireless.if_5GH)
		local channel_H=$(uci -q get wireless.$if_5GH.channel)
		[ $channel_H = "auto" ] && channel_H=0
		local bw_H=$(uci -q get wireless.$if_5GH.bw)
		[ $bw_H = "auto" ] && bw_H=0
		ch_has_nol_H=$(radartool -i ${if_5GH} ch_has_nol ${channel_H} ${bw_H})
	}
}

## CAP do whc_sync while update wireless configs
whc_handle()
{
	local mesh_role="$(mesh_cmd role)"

	# Not CAP, return
	[ "$mesh_role" != "CAP" ] && {
		logger -p 1 -t "$XQLOGTAG" " run in NON xqwhc mode, ignore whc_handle! "
		return 1
	}

	logger -p 1 -t "$XQLOGTAG" "   CAP, launch whc sync before wifi up"
	mesh_cmd sync_lite
	return 0
}

DEVICES=
MLD_DEVICES=
DRIVERS=
include /lib/wifi
trap "lock -u $wifi_qca_lock; wifi_trap;miwifi_trap;exit 1" INT TERM ABRT QUIT ALRM HUP
lock $wifi_qca_lock
scan_wifi

# miwifi: check if caller from /etc/init.d/network on rcS boot, thus we ignore whc_handle
ppid=$PPID
ppcmd="`cat /proc/${ppid}/cmdline 2>/dev/null`"
logger -p 1 -t "$XQLOGTAG" "**arg=$@, ppid $ppid, cmd=<$ppcmd>"
ppid=`cat /proc/${ppid}/status 2>/dev/null| grep PPid | grep -o "[0-9]*"`
logger -p 1 -t "$XQLOGTAG" " *parent ppid $ppid, cmd=<`cat /proc/${ppid}/cmdline 2>/dev/null`>"

# trap 'wifi_trap; exit' INT TERM ABRT QUIT ALRM

if grep -q 'skip_wifi' /proc/cmdline; then
	echo "skipping wifi bringup" > /dev/console
	exit 0
fi

case "$1" in
	down) wifi_updown "disable" "$2" "$3";;
	detect) wifi_detect_notice;;
	config) wifi_config "$2";;
	status) ubus_wifi_cmd "status" "$2";;
	reload) nfc_update reload; wifi_reload "$2" "wifi_reload";;
	reload_legacy) nfc_update reload; wifi_reload_legacy "$2" "" "$1" "$3";;
	event_reload_legacy) event_wifi_updown "enable" "$2";;
	load) wifi_load "$2" "wifi_load";;
	unload) wifi_unload "$2";;
	recover) wifi_recover "$2";;
	backup_cfg) backup_cfg ;;
	disable_vap)
		shift 1
		wifi_disable_vap "$@"
	;;
	enable_vap)
		shift 1
		wifi_enable_vap "$@"
	;;
	get_cac_time) wifi_get_cac_time "$@";;
	update)
		ch_has_nol=0
		ch_has_nol_H=0
		wifi_get_nol_state
		if [ "$ch_has_nol" == "0" ] && [ "$ch_has_nol_H" == "0" ]; then
			whc_handle
			wifi_update "$2"
		else
			nfc_update update
			whc_handle
			ubus call network reload
			cp /etc/config/wireless $NEW_WFCFG
			wifi_updown "enable" "$2"
			/usr/sbin/update_whc_ob_bssid &
			mv $NEW_WFCFG $BACKUP_FILE
		fi
	;;
	set_chan) set_chan "$2" "$3";;
	kickmacs) kick_macs "$2" ;;
	mlo) mlo "$@";;
	multi_up|\
	multi_down) ubus call network reload; multi_radio_wifi_updown "$@";;
	--help|help) usage;;
	#''|up|update) 
	#	nfc_update update
	#	ubus call network reload; wifi_updown "enable" "$2" "$3" "wifi_up";;
	#*) usage; exit 1;;
	*) 
		nfc_update update
		whc_handle
		ubus call network reload
		cp /etc/config/wireless $NEW_WFCFG
		wifi_updown "enable" "$2"
		/usr/sbin/update_whc_ob_bssid &
		mv $NEW_WFCFG $BACKUP_FILE
	;;
esac

lock -u $wifi_qca_lock
