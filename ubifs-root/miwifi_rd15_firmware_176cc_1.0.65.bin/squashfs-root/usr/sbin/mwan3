#!/bin/sh

. /lib/functions.sh
. /usr/share/libubox/jshn.sh
. /lib/functions/network.sh
. /lib/mwan3/mwan3.sh

help()
{
	cat <<EOF
Syntax: mwan3 [command]

Available commands:
	start             Load iptables rules, ip rules and ip routes
	stop              Unload iptables rules, ip rules and ip routes
	restart           Reload iptables rules, ip rules and ip routes
	ifup <iface>      Load rules and routes for specific interface
	ifdown <iface>    Unload rules and routes for specific interface
	interfaces        Show interfaces status
	policies          Show currently active policy
	connected         Show directly connected networks
	rules             Show active rules
	status            Show all status

	init_dev_rules    Init device rule tables
	add_device        Add rules for device
			- add_device <mac> <ipaddr> <ipv4|ipv6>
	del_device        Delete rules for device
			- del_device <mac>
	devices      	  Show all devices rules
	curr_wan <family> Get current used wan interface
EOF
}

ifdown()
{
	if [ -z "$1" ]; then
		echo "Error: Expecting interface. Usage: mwan3 ifdown <interface>" && exit 0
	fi

	if [ -n "$2" ]; then
		echo "Error: Too many arguments. Usage: mwan3 ifdown <interface>" && exit 0
	fi

	ACTION=ifdown INTERFACE=$1 /sbin/hotplug-call iface

	kill $(pgrep -f "mwan3track $1 $2") &> /dev/null
	mwan3_track_clean $1
}

ifup()
{
	local device enabled up l3_device itfstatus

	config_load mwan3

	if [ -z "$1" ]; then
		echo "Expecting interface. Usage: mwan3 ifup <interface>" && exit 0
	fi

	if [ -n "$2" ]; then
		echo "Too many arguments. Usage: mwan3 ifup <interface>" && exit 0
	fi

	config_get_bool enabled globals 'enabled' 0
	[ ${enabled} -gt 0 ] || {
		echo "Warning: mwan3 is global disabled. Usage: /etc/init.d/mwan3 start"
		exit 0
	}

	itfstatus=$(ubus -S call network.interface.$1 status)
	[ -n "$itfstatus" ] && {
		json_load $itfstatus
		json_get_vars up l3_device
		config_get enabled "$1" enabled 0

		if [ "$up" -eq 1 ] \
			&& [ -n "$l3_device" ] \
			&& [ "$enabled" -eq 1 ]; then
			ACTION=ifup INTERFACE=$1 DEVICE=$l3_device /sbin/hotplug-call iface
		fi
	}
}

interfaces()
{
	config_load mwan3

	echo "Interface status:"
	config_foreach mwan3_report_iface_status interface
	echo -e
}

policies()
{
	echo "Current ipv4 policies:"
	mwan3_report_policies_v4
	echo -e
	echo "Current ipv6 policies:"
	mwan3_report_policies_v6
	echo -e
}

connected()
{
	echo "Directly connected ipv4 networks:"
	mwan3_report_connected_v4
	echo -e
	echo "Directly connected ipv6 networks:"
	mwan3_report_connected_v6
	echo -e
}

rules()
{
	echo "Active ipv4 user rules:"
	mwan3_report_rules_v4
	echo -e
	echo "Active ipv6 user rules:"
	mwan3_report_rules_v6
	echo -e
}

status()
{
	interfaces
	policies
	connected
	rules
}

start()
{
	local enabled route_type

	config_load mwan3
	config_get_bool enabled globals 'enabled' 0
	[ "${enabled}" -gt 0 ] || {
		echo "Warning: mwan3 is global disabled. Usage: /etc/init.d/mwan3 start"
		exit 0
	}

	route_type="$(mwan3_routing_type)"
	[ "$route_type" = "0" ] && exit 0

	# init interfaces
	mwan3_init_interfaces

	[ "$route_type" = "2" ] && {
		mwan3_create_devices_ipset
		# load device rules
		config_foreach mwan3_load_iface_device device
	}

	config_foreach ifup interface
}

stop()
{
	local ipset route rule table IP IPT pid

	for pid in $(pgrep -f "mwan3track"); do
		kill -TERM "$pid" > /dev/null 2>&1
		sleep 1
		kill -KILL "$pid" > /dev/null 2>&1
	done

	config_load mwan3
	config_foreach mwan3_track_clean interface

	mwan3_lock

	for IP in "$IP4" "$IP6"; do

		for route in $(seq 1 $MWAN3_INTERFACE_MAX); do
			$IP route flush table $route > /dev/null
		done

		for rule in $($IP rule list | egrep '^[1-2][0-9]{3}\:' | cut -d ':' -f 1); do
			$IP rule del pref $rule > /dev/null
		done
	done

	for IPT in "$IPT4" "$IPT6"; do

		$IPT -D PREROUTING -j mwan3_hook > /dev/null
		$IPT -D OUTPUT -j mwan3_hook > /dev/null

		for table in $($IPT -S | awk '{print $2}' | grep mwan3 | sort -u); do
			$IPT -F $table > /dev/null
		done

		for table in $($IPT -S | awk '{print $2}' | grep mwan3 | sort -u); do
			$IPT -X $table > /dev/null
		done
	done

	for IPT_F in "$IPT4_F" "$IPT6_F"; do

		$IPT_F -D output_wan_rule -j mwan3_iface_out > /dev/null

		for table in $($IPT_F -S | awk '{print $2}' | grep mwan3 | sort -u); do
			$IPT_F -F $table > /dev/null
		done

		for table in $($IPT_F -S | awk '{print $2}' | grep mwan3 | sort -u); do
			$IPT_F -X $table > /dev/null
		done
	done

	for ipset in $($IPS -n list | grep mwan3_); do
		$IPS -q destroy $ipset
	done

	for ipset in $($IPS -n list | grep mwan3 | grep -E '_v4|_v6'); do
		$IPS -q destroy $ipset
	done

	# mwan3_lock_clean
	rm -rf $MWAN3_STATUS_DIR $MWAN3TRACK_STATUS_DIR

	mwan3_unlock

	# init interfaces
	mwan3_init_interfaces
}

restart() {
	stop
	start
}

add_device(){
	local mac="$1"
	local ipaddr="$2"
	local family="$3"
	local interface deviceId old_ipaddr

	deviceId=$(mwan3_get_device_id "$mac")

	config_load mwan3
	config_get interface "$deviceId" interface ""

	if [ -n "$interface" ]; then

		old_ipaddr=$(uci_get_state mwan3 "$deviceId" "$family")
		if [ -n "$old_ipaddr" ]; then
			mwan3_del_iface_device "$interface" "$old_ipaddr" "$family"
		fi

		mwan3_add_iface_device "$interface" "$ipaddr" "$family"
		uci_toggle_state mwan3 "$deviceId" "$family" "$ipaddr"

		# cleanup conntrack entries of this device
		conntrack -D --src "$ipaddr"
	fi
}

del_device(){
	local mac="$1"
	local ipaddr
	local deviceId

	[ $# != 1 ] && return

	deviceId=$(mwan3_get_device_id "$mac")

	config_load mwan3
	config_get interface $deviceId interface ""

	if [ -n "$interface" ]; then

		for family in ipv4 ipv6; do

			ipaddr=$(uci_get_state mwan3 $deviceId $family)
			if [ -n "$ipaddr" ]; then
				mwan3_del_iface_device $interface $ipaddr $family
				uci_revert_state mwan3 $deviceId $family
			fi
		done
	fi
}

init_dev_rules(){
	mwan3_init_iface_device_rules
}

devices(){
	config_load mwan3

	echo "Device rules:"
	mwan3_report_devices_rules
}

get_current_wan(){
	local family=$1
	local result=""

	result=$(mwan3_get_current_wan $family)

	echo "$result"
}

case "$1" in
	ifup|ifdown|interfaces|policies|connected|rules|status|start|stop|restart|devices)
		mwan3_init
		"$@"
	;;
	add_device)
		[ "$#" != 4 ] && {
			help
			exit 1
		}
		add_device $2 $3 $4
	;;
	del_device)
		[ "$#" != 2 ] && {
			help
			exit 1
		}
		del_device $2
	;;
	curr_wan)
		get_current_wan $2
	;;
	init_dev_rules)
		init_dev_rules
	;;
	*)
		help
	;;
esac

exit 0
